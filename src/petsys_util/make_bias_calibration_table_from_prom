#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse
import struct
import sys

parser = argparse.ArgumentParser(description='Make a simple SiPM bias voltage table')
parser.add_argument("-o", type=str, required=True, help="Output file")
args = parser.parse_args()

daqd = daqd.Connection()

outputFile = open(args.o, "w")

for portID, slaveID in daqd.getActiveFEBDs():
	if daqd.getBiasType(portID, slaveID) == 1:
		sys.stderr.write("ERROR: FEBD (portID %d, slaveID %d) has a bias mezzanine without PROM\n" % (portID, slaveID))
		exit(1)
		
	data = daqd.read_hv_m95256(portID, slaveID, 0x0000, 8)
	if data != "PETSYS  ":
		sys.stderr.write("ERROR: FEBD (portID %d, slaveID %d) PROM does  not contain a calibration table\n" % (portID, slaveID))
		exit(1)
	
	data = daqd.read_hv_m95256(portID, slaveID, 0x0008, 8)
	promLayoutVersion, = struct.unpack("<Q", data)
	
	if promLayoutVersion == 0x01:
		measuredVoltageFullScale = 100.0
		
		
		data = daqd.read_hv_m95256(portID, slaveID, 0x0010, 8)
		n_channels, = struct.unpack("<Q", data)

		data = daqd.read_hv_m95256(portID, slaveID, 0x0018, 8)
		n_x_values, = struct.unpack("<Q", data)
		
		address = 0x0020
		x_values = [ 0 for i in range(n_x_values) ]
		v_meas = {}
		adc_meas = {}
		for i in range(n_x_values):
			data = daqd.read_hv_m95256(portID, slaveID, 0x020 + 2*i, 2)
			address += 2
			v, =  struct.unpack("<H", data)
			x_values[i] = v

		for j in range(n_channels):
			ch_v_meas = [ 0.0 for i in range(n_x_values) ]
			for i in range(n_x_values):
				data = daqd.read_hv_m95256(portID, slaveID, address, 4)
				address += 4
				v, =  struct.unpack("<I", data)
				v = v * measuredVoltageFullScale / (2**32)
				ch_v_meas[i] = v
			v_meas[(portID, slaveID, j)] = ch_v_meas
			
		for j in range(n_channels):
			ch_adc_meas = [ 0 for i in range(n_x_values) ]
			for i in range(n_x_values):
				data = daqd.read_hv_m95256(portID, slaveID, address, 4)
				address += 4
				v, =  struct.unpack("<I", data)
				ch_adc_meas[i] = v
			adc_meas[(portID, slaveID, j)] = ch_adc_meas
			
		
		for j in range(n_channels):
			for i in range(n_x_values):
				outputFile.write("%d\t%d\t%d\t%d\t%f\t%d\n" % (portID, slaveID, j, x_values[i], v_meas[(portID, slaveID, j)][i], adc_meas[(portID, slaveID, j)][i]))
		
	else:
		sys.stderr.write("ERROR: FEBD (portID %d, slaveID %d) has a PROM with an unknown layout 0x%016x\n" % (portID, slaveID, promLayoutVersion))
		exit(1)
