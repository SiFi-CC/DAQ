#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import pandas
import os
import argparse
import math
import time
import requests
import logging
from threading import Thread
logging.basicConfig(level=logging.INFO, filename='output.log')
BASE_DIR = os.path.dirname(os.path.realpath(__file__))
username = ""
password = ""
def read_password_file():
        pathToFile = os.path.join(BASE_DIR, ".password")
        if os.path.exists(pathToFile):
                with open(pathToFile) as f:
                        l = f.readlines();
                        #TODO: Due for redesign if we want to keep running with python
                        global username, password
                        username = l[0].strip()
                        password = l[1].strip()
        else:
                logging.info(f"REST API password file '{pathToFile}' does not exist.")
                exit()
def post_measurement(data={}, pk=None):
        result = {}
        if pk is not None:
                #update
                endpoint = f"https://bragg.if.uj.edu.pl/SiFiCCData/Prototype/api/measurements/{pk}/"
                r = requests.post(url = endpoint, auth=requests.auth.HTTPBasicAuth(username, password) )
                result = r.json()
        else:
                #create
                endpoint = "https://bragg.if.uj.edu.pl/SiFiCCData/Prototype/api/measurements/"
                r = requests.post(url = endpoint, data=data, auth=requests.auth.HTTPBasicAuth(username, password) )
                result = r.json()
        logging.info(result)

def main():
        parser = argparse.ArgumentParser(description='Acquire data for TDC calibration')
        parser.add_argument("--config", type=str, required=True, help="Configuration file")
        parser.add_argument("-o", type=str, dest="fileNamePrefix", required=True, help = "Data filename (prefix)")
        parser.add_argument("--time", type=float, required=True, help="Acquisition time (in seconds)")
        parser.add_argument("--mode", type=str, required=True, choices=["tot", "qdc", "mixed"], help = "Acquisition mode (tot, qdc or mixed)")
        parser.add_argument("--pk", type=int, dest="pk")
        parser.add_argument("--enable-hw-trigger", dest="hwTrigger", action="store_true", help="Enable the hardware coincidence filter")
        parser.add_argument("--enable-ext-trigger", dest="extTrigger", action="store_true", help="Enable the hardware external trigger")
        parser.add_argument("--ext-trigger-delay", dest="extTriggerDelay", nargs="?", const=8, default=8, type=int, help="Set the delay for the external trigger")
        parser.add_argument("--param-table", type=str, dest="paramTable", help="Table containing the name and values of 1 or 2 parameters to be scanned during data acquisition. Allowed parameters are: OV (SIPM Overvoltage), vth_t1 (t1 discriminator threshold, in DAC units relative to the channel baseline), vth_t2 (t2 discriminator threshold, in DAC units relative to the channel baseline), vth_e (e discriminator threshold, in DAC units relative to the channel baseline), disc_lsb_t1 (t1 discriminator DAC LSB)")
        
        args = parser.parse_args()
        
        validParams = ["OV","vth_t1","vth_t2","vth_e","disc_lsb_t1"]
        
        if args.paramTable is not None:
                if not os.path.exists(args.paramTable):
                        logging.info("Error: no such file - %s" % args.paramTable)
                        exit(1)
                table = pandas.read_table(args.paramTable)
                parNames = list(table)
                for name in parNames:
                        if name not in validParams:
                                logging.info(("Error: Invalid parameter - %s" % name))
                                exit(1)
                                
                step1Values = list(table[parNames[0]])
                if len(parNames) == 2:
                        step2Values = list(table[parNames[1]])
                elif len(parNames) == 1:
                        step2Values = [0]
                        parNames.append("none")
                else:
                        logging.info("Error: only two parameters can be scanned at the same time") 
                        exit(1)
         
            
        mask = config.LOAD_ALL
        if args.mode != "mixed":
                mask ^= config.LOAD_QDCMODE_MAP
        systemConfig = config.ConfigFromFile(args.config, loadMask=mask)
        
        daqd0 = daqd.Connection()
        daqd0.initializeSystem()
        
        if args.extTrigger:
            threshold = 15
            print(f"delay: {args.extTriggerDelay}")
            daqd0.write_config_register_tgr(1, 0x0298, 0b1)
            daqd0.write_config_register_febds(10, 0x0604, threshold)
            daqd0.write_config_register_tgr(1, 0x0202, 0b1)
            daqd0.write_config_register_tgr(10, 0x0294, args.extTriggerDelay + 512)
        
        systemConfig.loadToHardware(daqd0, bias_enable=config.APPLY_BIAS_ON, hw_trigger_enable=args.hwTrigger, qdc_mode = args.mode)
        
        daqd0.openRawAcquisition(args.fileNamePrefix)
        
        activeAsics = daqd0.getActiveAsics()
        activeChannels = [ (portID, slaveID, chipID, channelID) for channelID in range(64) for portID, slaveID, chipID in activeAsics ]
        
        asicsConfig = daqd0.getAsicsConfig()
        
        if args.paramTable is None:
                daqd0.acquire(args.time, 0, 0)
        else:
                for step1 in step1Values:
                        step1 = float(step1)
                        if math.isnan(step1):
                                continue 
                        if parNames[0] in ['vth_t1', 'vth_t2', 'vth_e']:
                                for portID, slaveID, chipID, channelID in activeChannels:
                                        cc = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID]
                                        dac_setting = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), parNames[0], int(step1))
                                        cc.setValue(parNames[0], dac_setting)
                        elif parNames[0] in ['disc_lsb_t1']:
                                for portID, slaveID, chipID in activeAsics:
                                        cc = asicsConfig[(portID, slaveID, chipID)].globalConfig
                                        cc.setValue(parNames[0], int(step1))
                        elif parNames[0] in ['OV']:
                                biasVoltageConfig = daqd0.get_hvdac_config()
                                for key in daqd0.getActiveBiasChannels():
                                        offset, prebd, bd, over__ = systemConfig.getBiasChannelDefaultSettings(key)
                                        vset = offset + bd + step1
                                        dac_setting = systemConfig.mapBiasChannelVoltageToDAC(key, vset)
                                        biasVoltageConfig[key] = dac_setting
                                        daqd0.set_hvdac_config(biasVoltageConfig)
                        daqd0.setAsicsConfig(asicsConfig)       
                      
                        for step2 in step2Values:
                                step2 = float(step2)
                                if math.isnan(step2):
                                        continue 
                                if parNames[1] in ['vth_t1', 'vth_t2', 'vth_e']:
                                        for portID, slaveID, chipID, channelID in activeChannels:
                                                cc = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID]
                                                dac_setting = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), parNames[1], int(step2))
                                                cc.setValue(parNames[1], dac_setting)
                                elif parNames[1] in ['disc_lsb_t1']:
                                        for portID, slaveID, chipID in activeAsics:
                                                cc = asicsConfig[(portID, slaveID, chipID)].globalConfig
                                                cc.setValue(parNames[1], int(step2))
                                elif parNames[1] in ['OV']:
                                        #step2 = step2_
                                        biasVoltageConfig = daqd0.get_hvdac_config()
                                        for key in daqd0.getActiveBiasChannels():
                                                offset, prebd, bd, over__ = systemConfig.getBiasChannelDefaultSettings(key)
                                                vset = offset + bd + step2
                                                dac_setting = systemConfig.mapBiasChannelVoltageToDAC(key, vset)
                                                biasVoltageConfig[key] = dac_setting
                                        daqd0.set_hvdac_config(biasVoltageConfig)
                        
                                if parNames[1] == "none":
                                        logging.info("Python:: Acquiring data for: " + parNames[0] + " = " + str(step1)) 
                                else:
                                        logging.info("Python:: Acquiring data for: " + parNames[0] + " = " + str(step1) + " ; " + parNames[1] + " = " + str(step2))  
                                daqd0.setAsicsConfig(asicsConfig)
                                daqd0.acquire(args.time, float(step1), float(step2))   
                            
        #update entry in database
        if args.pk:
                read_password_file()
                post_measurement(pk=args.pk)
        systemConfig.loadToHardware(daqd0, bias_enable=config.APPLY_BIAS_OFF)

if __name__ == '__main__':
        main()
